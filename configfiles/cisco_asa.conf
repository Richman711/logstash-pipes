input { pipeline { address => cisco_asa } }
filter {

  if "asa" in [tags] {
    # Start of processing the message type
    # See https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs3.html#con_6941209
    # for examples.
    #
    # Pro CS tip: { if, if else, else } is a first to match statement so if you order the event numbers by frequency of occurance
    # you can eliminate thousands of checks (with each check is ~1 cpu cycle) to the bulk of your events.
    #
    # Also try to use dissect over grok as it can be over 6 times faster than grok, but if the log is variable in length and content
    # then you need to use grok.
    if "[event][code]" == "101001" {
      grok {
        match => [
          "message", "(Primary) Failover cable OK."
        ]
      }
      mutate { 
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "The failover cable is present and functioning correctly. Primary can also be listed as Secondary for the secondary unit."
        } 
      }
    } else if "[event][code]" == "101002" {
      grok {
        match => [
          "msg", ""
        ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "Connect the failover cable to both units of the failover pair."
          "[cisco][explanation]" => "Failover mode is enabled, but the failover cable is not connected to one unit of the failover pair. Primary can also be listed as Secondary for the secondary unit."
        }
      }
    } else if "[event][code]" == "106001" {
      grok {
        match => [
          "msg", "%{WORD:[network][direction]} %{WORD:[network][transport]} connection %{WORD:[cisco][action]} from %{IPORHOST:[source][address]}/%{INT:[source][port]} to %{IPORHOST:[destination][address]}/%{INT:[destination][port]} flags %{WORD:[cisco][tcp_flags]} %{SPACE}on interface %{WORD:[cisco][interface]}"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]", "[cisco][action]"]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None Required."
          "[cisco][explanation]" => "An attempt was made to connect to an inside address is denied by the security policy that is defined for the specified traffic type. The IP address displayed is the real IP address instead of the IP address that appears through NAT. Possible tcp_flags values correspond to the flags in the TCP header that were present when the connection was denied. For example, a TCP packet arrived for which no connection state exists in the ASA, and it was dropped. The tcp_flags in this packet are FIN and ACK. The tcp_flags are as follows: *ACK—The acknowledgment number was received *FIN—Data was sent *PSH—The receiver passed data to the application *RST—The connection was reset *SYN—Sequence numbers were synchronized to start a connection *URG—The urgent pointer was declared valid"
        }
      }
    } else if [event][code] == "302014" { 
      grok {
        patterns_dir => [ "/opt/logstash/patterns" ]
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][transport]} connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} duration %{DATA:[event_duration]} bytes %{INT:[network][bytes]} %{DATA:[cisco][log][reason]} \(%{DATA:[user][id]}\)",
          "message", "%{WORD:[cisco][action]} %{WORD:[network][transport]} connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} duration %{DATA:[event_duration]} bytes %{INT:[network][bytes]} %{GREEDYDATA:[cisco][log][reason]}"
        ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A TCP connection between two hosts was deleted. The following list describes the message values: * id —A unique identifier *interface, real-address, real-port—The actual socket *duration—The lifetime of the connection *bytes— The data transfer of the connection *User—The AAA name of the user *idfw_user —The name of the identity firewall user *reason—The action that causes the connection to terminate. Set the reason variable to one of the TCP termination reasons listed in the following table. * teardown-initiator—Interface name of the side that initiated the teardown."
        }
      }
      #drop { }
    } else if [event][code] == "302015" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][direction]} %{WORD:[network][transport]} connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\(%{IP:[source][nat][address]}/%{INT:[source][nat][port]}\))? ?(\(%{DATA:[source][user][id]}\))? to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} \(%{IPORHOST:[destination][nat][address]}/%{INT:[destination][nat][port]}\) ?(\(%{DATA:[destination][user][id]}\))? \(%{DATA:[user][id]}\)"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A UDP connection slot between two hosts was created. The following list describes the message values: * number—A unique identifier * interface, real_address, real_port—The actual sockets * mapped_address and mapped_port—The mapped sockets * user—The AAA name of the user * idfw_user —The name of the identity firewall user       If inbound is specified, then the original control connection is initiated from the outside. For example, for UDP, all data transfer channels are inbound if the original control channel is inbound. If outbound is specified, then the original control connection is initiated from the inside."
        }
      }
      #drop { }
    } else if [event][code] == "302016" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][transport]} connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\[\(%{DATA:[source][user][id]}\)\])?%{SPACE}to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} ?(\(%{DATA:[destination][user][id]}\))?%{SPACE}duration %{DATA:[event_duration]} bytes %{INT:[network][bytes]} ?(\(%{DATA:[user][id]}\))?"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A UDP connection slot between two hosts was deleted. The following list describes the message values: * number—A unique identifier * interface, real_address, real_port—The actual sockets * time—The lifetime of the connection * bytes—The data transfer of the connection * id—A unique identifier * interface, real-address, real-port—The actual sockets * duration— The lifetime of the connection * bytes—The data transfer of the connection * user—The AAA name of the user * idfw_user —The name of the identity firewall user"
        }
      }
      #drop { }
    } else if [event][code] == "302013" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][direction]} %{WORD:[network][transport]} connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\(%{IP:[source][nat][address]}/%{INT:[source][nat][port]}\))? ?(\[\(%{DATA:[source][user][id]}\)\])? to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} ?(\(%{IPORHOST:[destination][nat][address]}/%{INT:[destination][nat][port]}\))? ?(\[\(%{DATA:[destination][user][id]}\)\])? ?(\(%{DATA:[user][id]}\))?"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A TCP connection slot between two hosts was created. * cisco.session_id —A unique identifier * interface, real-address, real-port—The actual sockets * mapped-address, mapped-port—The mapped sockets * user—The AAA name of the user * idfw_user— The name of the identity firewall user    If inbound is specified, the original control connection was initiated from the outside. For example, for FTP, all data transfer channels are inbound if the original control channel is inbound. If outbound is specified, the original control connection was initiated from the inside."
        }
      }
      #drop { }
    } else if [event][code] == "302020" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][direction]} %{WORD:[network][transport]} connection for faddr %{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\[\(%{DATA:[source][user][id]}\)\])? gaddr %{IPORHOST:[destination][address]}/%{INT:[destination][port]} laddr %{IPORHOST:[destination][nat][address]}/%{INT:[destination][nat][port]} ?(\(%{DATA:[user][id]}\))? type %{INT:[cisco][icmp][type]} code %{INT:[cisco][icmp][code]}"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "An ICMP session was established in the fast-path when stateful ICMP was enabled using the inspect icmp command. The following list describes the message values: * faddr —Specifies the IP address of the foreign host * gaddr —Specifies the IP address of the global host * laddr —Specifies the IP address of the local host * idfw_user —The name of the identity firewall user * user —The username associated with the host from where the connection was initiated * type —Specifies the ICMP type * code —Specifies the ICMP code"
        }
      }
      #drop { }
    } else if [event][code] == "106015" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][transport]} \(no connection\) from %{IPORHOST:[source][address]}/%{INT:[source][port]} to %{IPORHOST:[destination][address]}/%{INT:[destination][port]} flags %{DATA:[cisco][tcp_flag]}  on interface %{WORD:[cisco][destination][interface_name]}"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required unless the ASA receives a large volume of these invalid TCP packets. If this is the case, trace the packets to the source and determine the reason these packets were sent."
          "[cisco][explanation]" => "The ASA discarded a TCP packet that has no associated connection in the ASA connection table. The ASA looks for a SYN flag in the packet, which indicates a request to establish a new connection. If the SYN flag is not set, and there is no existing connection, the ASA discards the packet."
        }
      }
      #drop { }
    } else if [event][code] == "305012" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} dynamic %{WORD:[network][transport]} translation from %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\(%{DATA:[user][id]}\))?%{SPACE}to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} duration %{GREEDYDATA:event_duration}",
          "message", "%{WORD:[cisco][action]} static %{WORD:[network][transport]} translation from %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\(%{DATA:[user][id]}\))?%{SPACE}to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} duration %{GREEDYDATA:event_duration}"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
       strip => [event_duration]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "The address translation slot was deleted."
        }
      }
      #drop { }
    } else if [event][code] == "305011" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} dynamic %{WORD:[network][transport]} translation from %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\(%{DATA:[user][id]}\))?%{SPACE}to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]}",
          "message", "%{WORD:[cisco][action]} static %{WORD:[network][transport]} translation from %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\(%{DATA:[user][id]}\))?%{SPACE}to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]}"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A TCP, UDP, or ICMP address translation slot was created. The slot translates the source socket from the local side to the global side. In reverse, the slot translates the destination socket from the global side to the local side."
        }
      }
      #drop { }
    } else if [event][code] == "106023" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][transport]} src %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} dst %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} by access-group \"%{DATA:[cisco][acl_id]}\" \[%{GREEDYDATA:[cisco][hex_code]}\]"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "If messages persist from the same source address, a footprinting or port scanning attempt might be occurring. Contact the remote host administrator."
          "[cisco][explanation]" => "A real IP packet was denied by the ACL. This message appears even if you do not have the log option enabled for an ACL. The IP address is the real IP address instead of the values that display through NAT. Both user identity information and FQDN information is provided for the IP addresses if a matched one is found. The ASA logs either identity information (domain\user) or FQDN (if the username is not available). If the identity information or FQDN is available, the ASA logs this information for both the source and destination."
        }
      }
      #drop { }
    } else if [event][code] == "106100" {
      grok {
        match => [
          "message", "access-list %{DATA:[cisco][acl_id]} %{WORD:[cisco][action]} %{WORD:[network][transport]} %{WORD:[cisco][source][interface_name]}/%{IPORHOST:[source][address]}\(%{INT:[source][port]}\) \-\> %{WORD:[cisco][destination][interface_name]}/%{IPORHOST:[destination][address]}\(%{INT:[destination][port]}\) hit-cnt %{INT:[cisco][hit_cnt]} first hit \[%{GREEDYDATA:[cisco][hex_code]}\]",
          "message", "access-list %{DATA:[cisco][acl_id]} %{WORD:[cisco][action]} %{WORD:[network][transport]} %{WORD:[cisco][source][interface_name]}/%{IPORHOST:[source][address]}\(%{INT:[source][port]}\) \-\> %{WORD:[cisco][destination][interface_name]}/%{IPORHOST:[destination][address]}\(%{INT:[destination][port]}\) hit-cnt %{INT:[cisco][hit_cnt]} %{INT}-second interval \[%{GREEDYDATA:[cisco][hex_code]}\]"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "The initial occurrence or the total number of occurrences during an interval are listed. This message provides more information than message 106023, which only logs denied packets, and does not include the hit count or a configurable level.   When an access-list line has the log argument, it is expected that this message ID might be triggered because of a nonsynchronized packet reaching the ASA and being evaluated by the access list. For example, if an ACK packet is received on the ASA (for which no TCP connection exists in the connection table), the ASA might generate message 106100, indicating that the packet was permitted; however, the packet is later correctly dropped because of no matching connection.   The following list describes the message values: * permitted | denied | est-allowed—These values specify if the packet was permitted or denied by the ACL. If the value is est-allowed, the packet was denied by the ACL but was allowed for an already established session (for example, an internal user is allowed to accesss the Internet, and responding packets that would normally be denied by the ACL are accepted). * protocol —TCP, UDP, ICMP, or an IP protocol number. * interface_name —The interface name for the source or destination of the logged flow. The VLAN interfaces are supported. * source_address —The source IP address of the logged flow. The IP address is the real IP address instead of the values that display through NAT. * dest_address —The destination IP address of the logged flow. The IP address is the real IP address instead of the values that display through NAT. * source_port —The source port of the logged flow (TCP or UDP). For ICMP, the number after the source port is the message type. * idfw_user— The user identity username, including the domain name that is added to the existing syslog when the ASA can find the username for the IP address. * sg_info— The security group tag that is added to the syslog when the ASA can find a security group tag for the IP address. The security group name is displayed with the security group tag, if available. * dest_port —The destination port of the logged flow (TCP or UDP). For ICMP, the number after the destination port is the ICMP message code, which is available for some message types. For type 8, it is always 0. For a list of ICMP message types, see the following URL: http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xml. * hit-cnt number —The number of times this flow was permitted or denied by this ACL entry in the configured time interval. The value is 1 when the ASA generates the first message for this flow. * first hit—The first message generated for this flow. * number -second interval—The interval in which the hit count is accumulated. Set this interval using the access-list command with the interval option. * hash codes—Two are always printed for the object group ACE and the constituent regular ACE. Values are determined on which ACE that the packet hit. To display these hash codes, enter the show-access list command."
        }
      }
      #drop { }
    } else if [event][code] == "304001" {
      grok {
        match => [
          "message", "%{IPORHOST:[source][address]} Accessed URL %{IP:[destination][ip]}:%{GREEDYDATA:[http][request][referrer]}"
        ]
      }
      grok {
        match => [
          "[http][request][referrer]", "http://%{DATA:[destination][address]}/"
        ]
      }
      mutate {
        add_field => {
          "[destination][domain]" => "%{[destination][address]}"
          "[network][protocol]" => "http"
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "The specified host tried to access the specified URL If you enable the HTTP inspection with custom HTTP policy map, the following possibilities are seen.When the packet of GET request does not have the hostname parameter, instead of printing the URI, it prints the following message:%ASA-5-304001: client IP Accessed URL server ip:Hostname not present URI: URIIf a large URI which cannot be printed in a single syslog, you can print partial wherever it is being chopped down.For instance, when the URL is to be divided into multiple chunks and logged, the following message is printed:%ASA-5-304001: client IP Accessed URL server ip: http(/ftp)://hostname/URI_CHUNK1 partial%ASA-5-304001: client IP Accessed URL server ip: partial URI_CHUNK1 partial............%ASA-5-304001: client IP Accessed URL server ip: partial URI_CHUNKnThe limit for URI is 1024 bytes.If the current packet contains partial URI at the beginning or end, use the same logic as explained above."
        }
      }
      #drop { }
    } else if [event][code] == "106006" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][direction]} %{WORD:[network][transport]} from %{IPORHOST:[source][address]}/%{INT:[source][port]} to %{IPORHOST:[destination][address]}/%{INT:[destination][port]} on interface %{GREEDYDATA:[cisco][destination][interface_name]}"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "An inbound UDP packet was denied by the security policy that is defined for the specified traffic type."
        }
      }
      #drop { }
    } else if [event][code] == "106001" {
      grok {
        match => [
          "message", "%{WORD:[network][direction]} %{WORD:[network][transport]} connection %{WORD:[cisco][action]} from %{IPORHOST:[source][address]}/%{INT:[source][port]} to %{IPORHOST:[destination][address]}/%{INT:[destination][port]} flags %{DATA:[cisco][tcp_flags]} on interface %{GREEDYDATA:[cisco][destination][interface_name]}"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "An attempt was made to connect to an inside address is denied by the security policy that is defined for the specified traffic type. The IP address displayed is the real IP address instead of the IP address that appears through NAT. Possible tcp_flags values correspond to the flags in the TCP header that were present when the connection was denied. For example, a TCP packet arrived for which no connection state exists in the ASA, and it was dropped. The tcp_flags in this packet are FIN and ACK. The tcp_flags are as follows: * ACK—The acknowledgment number was received * FIN—Data was sent * PSH—The receiver passed data to the application * RST—The connection was reset * SYN—Sequence numbers were synchronized to start a connection * URG—The urgent pointer was declared valid"
        }
      }
      #drop { }
    } else if [event][code] == "313001" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][transport]} type=%{INT:[cisco][icmp][type]}, code=%{INT:[cisco][icmp][code]} from %{IPORHOST:[source][address]} on interface %{GREEDYDATA:[cisco][destination][interface_name]}"
        ]
      }
      mutate {
        lowercase => [ "[cisco][action]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "Contact the administrator of the peer device."
          "[cisco][explanation]" => "When using the icmp command with an access list, if the first matched entry is a permit entry, the ICMP packet continues processing. If the first matched entry is a deny entry, or an entry is not matched, the ASA discards the ICMP packet and generates this message. The icmp command enables or disables pinging to an interface. With pinging disabled, the ASA cannot be detected on the network. This feature is also referred to as configurable proxy pinging."
        }
      }
      #drop { }
    } else if [event][code] == "313005" {
      grok {
        match => [
          "message", "No matching connection for %{WORD:[network][transport]} error message: %{DATA:[cisco][icmp][msg_info]} on %{DATA:[cisco][source][interface_name]} interface.%{SPACE}Original IP payload: %{GREEDYDATA:[cisco][icmp][original_ip_payload]}"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "If the cause is an attack, you can deny the host by using ACLs."
          "[cisco][explanation]" => "ICMP error packets were dropped by the ASA because the ICMP error messages are not related to any session already established in the ASA."
        }
      }
      #drop { }
    } else if [event][code] == "302021" {
      grok {
        match => [
          "message", "%{WORD:[cisco][action]} %{WORD:[network][transport]} connection for faddr %{IPORHOST:[source][address]}/%{INT:[source][port]} gaddr %{IPORHOST:[destination][address]}/%{INT:[destination][port]} laddr %{IPORHOST:[destination][nat][address]}/%{INT:[destination][nat][port]}%{SPACE}?(\(%{DATA:[user][id]}\))? type %{INT:[cisco][icmp][type]} code %{INT:[cisco][icmp][code]}"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "An ICMP session is removed in the fast-path when stateful ICMP is enabled using the inspect icmp command. The following list describes the message values: * faddr —Specifies the IP address of the foreign host * gaddr —Specifies the IP address of the global host * laddr —Specifies the IP address of the local host * idfw_user —The name of the identity firewall user * user —The username associated with the host from where the connection was initiated * type —Specifies the ICMP type * code —Specifies the ICMP code"
        }
      }
      #drop { }
    } else if [event][code] == "302010" {
      dissect {
        mapping => {
          "message" => "%{[cisco][connections][in_use]} in use, %{[cisco][connections][most_used]}"
        }
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "Provides information on the number of connections that are in use and most used. * connections—The number of connections"
        }
      }
      #drop { }
    } else {
      mutate {
        add_tag => [ "to_do" ]
      }
    }
  } # end if "asa" 

  if [event_duration] {
    mutate {
      add_tag => [ "duration" ]
    }
    dissect {
      mapping => {
        #"event_duration" => "%{hours}h:%{minutes}m:%{seconds}s"
        "event_duration" => "%{hours}:%{minutes}:%{seconds}"
      }
      convert_datatype => {
        "hours" => "int"
        "minutes" => "int"
        "seconds" => "int"
      }
      tag_on_failure => "elapsed_fail"
    }
    if "elapsed_fail" not in [tags] {
      ruby {
        code => "event.set('[event][duration]', (event.get('hours') * 3600 + event.get('minutes') * 60 + event.get('seconds')))"
        #code => "event.set('[event][duration]', (event.get('hours') * 3600 + event.get('minutes') * 60 + event.get('seconds')) * 1000000000)"
        remove_field => [ "hours", "minutes", "seconds", "event_duration" ]
      }
    }
    if "elapsed_fail" in [tags] {
      mutate {
        remove_tag => [ "elapsed_fail" ]
      }
      dissect {
        mapping => {
          "event_duration" => "%{hours}h:%{minutes}m:%{seconds}s"
          #"event_duration" => "%{hours}:%{minutes}:%{seconds}"
        }
        convert_datatype => {
          "hours" => "int"
          "minutes" => "int"
          "seconds" => "int"
        }
      tag_on_failure => "elapsed_fail"
      }
      if "elapsed_fail" not in [tags] {
        ruby {
          #code => "event.set('[event][duration]', (event.get('hours') * 3600 + event.get('minutes') * 60 + event.get('seconds')))"
          code => "event.set('[event][duration]', (event.get('hours') * 3600 + event.get('minutes') * 60 + event.get('seconds')) * 1000000000)" #when duration is measured in nanoseconds
          remove_field => [ "hours", "minutes", "seconds", "event_duration" ]
        }
      }
    }

  } #end if[event_duration]
}
output {
  if [user][id] {
    pipeline { send_to => [user_translate] }
  } else {
    pipeline { send_to => [cisco_facility_translate] }
  }
}
