input { pipeline { address => cisco_asa } }
filter {

  if "asa" in [tags] {
    # Start of processing the message type
    # See https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs3.html#con_6941209
    # for examples.
    #
    # Pro CS tip: { if, if else, else } is a first to match statement so if you order the event numbers by frequency of occurance
    # you can eliminate thousands of checks (with each check is ~1 cpu cycle) to the bulk of your events.
    if "[event][code]" == "101001" {
      grok {
        match => [
          "message", "(Primary) Failover cable OK."
        ]
      }
      mutate { 
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "The failover cable is present and functioning correctly. Primary can also be listed as Secondary for the secondary unit."
        } 
      }
    } else if "[event][code]" == "101002" {
      grok {
        match => [
          "msg", ""
        ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "Connect the failover cable to both units of the failover pair."
          "[cisco][explanation]" => "Failover mode is enabled, but the failover cable is not connected to one unit of the failover pair. Primary can also be listed as Secondary for the secondary unit."
        }
      }
    } else if "[event][code]" == "106001" {
      grok {
        match => [
          "msg", "%{WORD:[network][direction]} %{WORD:[network][transport]} connection %{WORD:[cisco][action]} from %{IPORHOST:[source][address]}/%{INT:[source][port]} to %{IPORHOST:[destination][address]}/%{INT:[destination][port]} flags %{WORD:[cisco][tcp_flags]} %{SPACE}on interface %{WORD:[cisco][interface]}"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]", "[cisco][action]"]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None Required."
          "[cisco][explanation]" => "An attempt was made to connect to an inside address is denied by the security policy that is defined for the specified traffic type. The IP address displayed is the real IP address instead of the IP address that appears through NAT. Possible tcp_flags values correspond to the flags in the TCP header that were present when the connection was denied. For example, a TCP packet arrived for which no connection state exists in the ASA, and it was dropped. The tcp_flags in this packet are FIN and ACK. The tcp_flags are as follows: *ACK—The acknowledgment number was received *FIN—Data was sent *PSH—The receiver passed data to the application *RST—The connection was reset *SYN—Sequence numbers were synchronized to start a connection *URG—The urgent pointer was declared valid"
        }
      }
    } else if [event][code] == "302014" { 
      grok {
        patterns_dir => [ "/opt/logstash/patterns" ]
        match => [
          "message", "Teardown TCP connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} duration %{DATA:[event_duration]} bytes %{INT:[network][bytes]} %{DATA:[cisco][log][reason]} \(%{DATA:[user][id]}\)",
          "message", "Teardown TCP connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} duration %{DATA:[event_duration]} bytes %{INT:[network][bytes]} %{GREEDYDATA:[cisco][log][reason]}"
        ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A TCP connection between two hosts was deleted. The following list describes the message values: * id —A unique identifier *interface, real-address, real-port—The actual socket *duration—The lifetime of the connection *bytes— The data transfer of the connection *User—The AAA name of the user *idfw_user —The name of the identity firewall user *reason—The action that causes the connection to terminate. Set the reason variable to one of the TCP termination reasons listed in the following table. * teardown-initiator—Interface name of the side that initiated the teardown."
        }
      }
      #drop { }
    } else if [event][code] == "302015" {
      grok {
        match => [
          "message", "Built %{WORD:[network][direction]} %{WORD:[network][transport]} connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\(%{IP:[source][nat][address]}/%{INT:[source][nat][port]}\))? ?(\(%{DATA:[source][user][id]}\))? to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} \(%{IPORHOST:[destination][nat][address]}/%{INT:[destination][nat][port]}\) ?(\(%{DATA:[destination][user][id]}\))? \(%{DATA:[user][id]}\)"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A UDP connection slot between two hosts was created. The following list describes the message values: * number—A unique identifier * interface, real_address, real_port—The actual sockets * mapped_address and mapped_port—The mapped sockets * user—The AAA name of the user * idfw_user —The name of the identity firewall user       If inbound is specified, then the original control connection is initiated from the outside. For example, for UDP, all data transfer channels are inbound if the original control channel is inbound. If outbound is specified, then the original control connection is initiated from the inside."
        }
      }
      #drop { }
    } else if [event][code] == "302016" {
      grok {
        match => [
          "message", "Teardown %{WORD:[network][transport]} connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\[\(%{DATA:[source][user][id]}\)\])?%{SPACE}to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} ?(\(%{DATA:[destination][user][id]}\))?%{SPACE}duration %{DATA:[event_duration]} bytes %{INT:[network][bytes]} ?(\(%{DATA:[user][id]}\))?"
        ]
      }
      mutate {
        lowercase => [ "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A UDP connection slot between two hosts was deleted. The following list describes the message values: * number—A unique identifier * interface, real_address, real_port—The actual sockets * time—The lifetime of the connection * bytes—The data transfer of the connection * id—A unique identifier * interface, real-address, real-port—The actual sockets * duration— The lifetime of the connection * bytes—The data transfer of the connection * user—The AAA name of the user * idfw_user —The name of the identity firewall user"
        }
      }
      #drop { }
    } else if [event][code] == "302013" {
      grok {
        match => [
          "message", "Built %{WORD:[network][direction]} %{WORD:[network][transport]} connection %{INT:[cisco][session_id]} for %{WORD:[cisco][source][interface_name]}:%{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\(%{IP:[source][nat][address]}/%{INT:[source][nat][port]}\))? ?(\[\(%{DATA:[source][user][id]}\)\])? to %{WORD:[cisco][destination][interface_name]}:%{IPORHOST:[destination][address]}/%{INT:[destination][port]} ?(\(%{IPORHOST:[destination][nat][address]}/%{INT:[destination][nat][port]}\))? ?(\[\(%{DATA:[destination][user][id]}\)\])? ?(\(%{DATA:[user][id]}\))?"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "A TCP connection slot between two hosts was created. * cisco.session_id —A unique identifier * interface, real-address, real-port—The actual sockets * mapped-address, mapped-port—The mapped sockets * user—The AAA name of the user * idfw_user— The name of the identity firewall user    If inbound is specified, the original control connection was initiated from the outside. For example, for FTP, all data transfer channels are inbound if the original control channel is inbound. If outbound is specified, the original control connection was initiated from the inside."
        }
      }
      #drop { }
    } else if [event][code] == "302020" {
      grok {
        match => [
          "message", "Built %{WORD:[network][direction]} %{WORD:[network][transport]} connection for faddr %{IPORHOST:[source][address]}/%{INT:[source][port]} ?(\[\(%{DATA:[source][user][id]}\)\])? gaddr %{IPORHOST:[destination][address]}/%{INT:[destination][port]} laddr %{IPORHOST:[destination][nat][address]}/%{INT:[destination][nat][port]} ?(\(%{DATA:[user][id]}\))? type %{INT:[cisco][icmp][type]} code %{INT:[cisco][icmp][code]}"
        ]
      }
      mutate {
        lowercase => [ "[network][direction]", "[network][transport]" ]
      }
      mutate {
        add_field => {
          "[cisco][recommended_action]" => "None required."
          "[cisco][explanation]" => "An ICMP session was established in the fast-path when stateful ICMP was enabled using the inspect icmp command. The following list describes the message values: * faddr —Specifies the IP address of the foreign host * gaddr —Specifies the IP address of the global host * laddr —Specifies the IP address of the local host * idfw_user —The name of the identity firewall user * user —The username associated with the host from where the connection was initiated * type —Specifies the ICMP type * code —Specifies the ICMP code"
        }
      }
      #drop { }
    } else {
      mutate {
        add_tag => [ "to_do" ]
      }
    }
  } # end if "asa" 

  if [event_duration] {
    mutate {
      add_tag => [ "duration" ]
    }
    dissect {
      mapping => {
        #"event_duration" => "%{hours}h:%{minutes}m:%{seconds}s"
        "event_duration" => "%{hours}:%{minutes}:%{seconds}"
      }
      convert_datatype => {
        "hours" => "int"
        "minutes" => "int"
        "seconds" => "int"
      }
      tag_on_failure => "elapsed_fail"
    }
    if "elapsed_fail" not in [tags] {
      ruby {
        code => "event.set('[event][duration]', (event.get('hours') * 3600 + event.get('minutes') * 60 + event.get('seconds')))"
        #code => "event.set('[event][duration]', (event.get('hours') * 3600 + event.get('minutes') * 60 + event.get('seconds')) * 1000000000)"
        remove_field => [ "hours", "minutes", "seconds", "event_duration" ]
      }
    }
    if "elapsed_fail" in [tags] {
      mutate {
        remove_tag => [ "elapsed_fail" ]
      }
      dissect {
        mapping => {
          "event_duration" => "%{hours}h:%{minutes}m:%{seconds}s"
          #"event_duration" => "%{hours}:%{minutes}:%{seconds}"
        }
        convert_datatype => {
          "hours" => "int"
          "minutes" => "int"
          "seconds" => "int"
        }
      tag_on_failure => "elapsed_fail"
      }
      if "elapsed_fail" not in [tags] {
        ruby {
          #code => "event.set('[event][duration]', (event.get('hours') * 3600 + event.get('minutes') * 60 + event.get('seconds')))"
          code => "event.set('[event][duration]', (event.get('hours') * 3600 + event.get('minutes') * 60 + event.get('seconds')) * 1000000000)" #when duration is measured in nanoseconds
          remove_field => [ "hours", "minutes", "seconds", "event_duration" ]
        }
      }
    }
  } #end if[event_duration]
}
output {
  if [user][id] {
    pipeline { send_to => [user_translate] }
  } else {
    pipeline { send_to => [cisco_facility_translate] }
  }
}
