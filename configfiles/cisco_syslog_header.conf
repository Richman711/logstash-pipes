input {
  pipeline { address => syslogs }
}
filter {
  # Be sure to add the default ecs template mappings to elasticsearch and be found at or near
  # https://github.com/elastic/ecs/blob/1.4/generated/elasticsearch/7/template.json
  # placed into elastic with a simple "PUT _template/my_ecs" followed by the JSON.
  # 
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  # Templates with lower order values are merged first. Templates with higher order values are
  # merged later, overriding templates with lower values.
  # Also, be sure to increase its "order" over other templates so that these mappings are the
  # default and you can add it to other index-templates by including it in the "index patterns"
  # such as network-* for all network-cisco-asa-fw-*, network-cisco-asa-vpn-*, network-cisco-switch-*,
  # network-webproxy-mcafee-*, network-netflow-network-*, network-netflow-systems-*
  # GET _template/my_ecs/
  # "my_ecs" : {
  #   "order" : 2,
  #    "index_patterns" : [
  #      "network-*"
  #    ],


  if [type] == "syslog-firewall" or [type] == "syslog-vpn" or [type] == "syslog-cisco" {

    # Fingerprint is used to provide a documnet ID to avoid the indexing of duplicate syslog messages
    # this does slowdown indexing as elasticsearch needs to validate that the id is available 
    # a solution is to use a loadbalancer and only have one syslog endpoint that feeds into elastic
    # in the cisco configuration. Then you can disable figerprint when sending to elastic to gain a 
    # littlebit of performance on ingestion. 
    fingerprint {
      source              => [ "message" ]
      method              => "SHA256"
      key                 => "Some secret passphrase for uniqueness."
      concatenate_sources => true
      target              => "[event][hash]"
    } #end fingerprint
  } #end if

  if [type] == "syslog-firewall" or [type] == "syslog-vpn" {
    mutate {
      add_tag =>  "asa" 
    }#end mutate
  } else if [type] == "syslog-cisco" {
    mutate {
      add_tag => "cisco-network"
    }
  }

  # Keep here to remove host field or it will throw grok errors for [host][name]
  mutate {
    remove_field => [ "host" ]
  }

  grok {
    # There are a couple of custom patterns associated with this filter.
    patterns_dir => [ "/opt/logstash/patterns" ]

    match => [
      "message", "%{SYSLOG5424PRI}%{MONTH:month} %{SPACE}%{MONTHDAY:day} %{TIME:time} %{DATA:[host][name]} : %%{DATA:syslog_msg_code}: %{GREEDYDATA:msg}",
      "message", "%{SYSLOG5424PRI}%{MONTH:month} %{SPACE}%{MONTHDAY:day} %{YEAR:year} %{TIME:time} %{DATA:[host][name]} : %%{DATA:syslog_msg_code}: %{GREEDYDATA:msg}",
      "message", "%{SYSLOG5424PRI}(%{NUMBER}): %{DATA:[host][name]}: (%{NUMBER:[event][sequence]}): %{MONTH:month} %{SPACE}%{MONTHDAY:day} %{YEAR:year} %{TIME:time} %{WORD:[event][timezone]}: \%%{DATA:syslog_msg_code}: %{GREEDYDATA:msg}",
      "message", "%{SYSLOG5424PRI}(%{NUMBER}): %{DATA:[host][name]}: %{MONTH:month} %{SPACE}%{MONTHDAY:day} %{YEAR:year} %{TIME:time} %{WORD:[event][timezone]}: \%%{DATA:syslog_msg_code}: %{GREEDYDATA:msg}",
      "message", "%{SYSLOG5424PRI}(%{NUMBER}): %{DATA:[host][name]}: (%{NUMBER:[event][sequence]}): %{MONTH:month} %{SPACE}%{MONTHDAY:day} %{YEAR:year} %{TIME:time} %{WORD:[event][timezone]}: \%%{DATA:syslog_msg_code}: %{GREEDYDATA:msg}"
    ]
  }#end grok

  if [year] {

    mutate {
      add_field => {
        "[event_created]" => "%{month} %{day} %{year} %{time}"
      }#end add_field
    } #end mutate

    # Order on most frequent to least this will save processing cycles
    # http://joda-time.sourceforge.net/timezones.html
    if [event][timezone] == "EST" {
      date { 
        match  => [ "[event_created]", "MMM dd yyyy HH:mm:ss", "MMM d yyyy HH:mm:ss" ] 
        timezone => "America/New_York"
        target => "[event][created]"
      }
    } else if [event][timezone] == "UTC" {
        date { 
          match  => [ "[event_created]", "MMM dd yyyy HH:mm:ss", "MMM d yyyy HH:mm:ss" ] 
          timezone => "UTC"
          target => "[event][created]"
        }
    }

    if "_dateparsefailure" in [tags] {
      mutate {
        remove_tag => [ "_dateparsefailure" ]
      }
      if [event][timezone] == "EST" {
        date { 
          match  => [ "[event_created]", "MMM dd yyyy HH:mm:ss.SSS", "MMM d yyyy HH:mm:ss.SSS" ] 
          timezone => "America/New_York"
          target => "[event][created]"
        }
      } else if [event][timezone] == "UTC" {
        date { 
          match  => [ "[event_created]", "MMM dd yyyy HH:mm:ss.SSS", "MMM d yyyy HH:mm:ss.SSS" ] 
          timezone => "UTC"
          target => "[event][created]"
        }
      }
    }
  } else {
    mutate {
      add_field => {
        "[event_created]" => "%{month} %{day} %{time}"
      }#end add_field
    } #end mutate
    date { 
      match  => [ "[event_created]", "MMM dd HH:mm:ss", "MMM d HH:mm:ss" ] 
      target => "[event][created]"
      timezone => "America/New_York"   ##### Besure to put the timezone the log is coming from ####
    }
  }

  mutate {
    rename => { "message" => "[event][original]"}
  } #end mutate

  mutate {
    add_field => {"[log][original]" => "%{[event][original]}"}
  } #end mutate

  mutate {
    remove_field => [ "event_created", "day", "month", "time", "year", "tz" ] # 
  }

  mutate {
    rename => { "msg" => "message"}
  }

  if "asa" in [tags] {
    grok{
      match => [
        "syslog_msg_code", "%{DATA:[event][dataset]}-%{DATA:[event][severity]}-%{GREEDYDATA:[event][code]}",
        "syslog_msg_code", "%{GREEDYDATA:msg}"
      ]
    }
  } else if "cisco-network" in [tags] {
    grok{
      match => [
        "syslog_msg_code", "%{DATA:[event][dataset]}-%{DATA}-%{DATA:[event][severity]}-%{GREEDYDATA:[event][code]}",
        "syslog_msg_code", "%{DATA:[event][dataset]}-%{DATA:[event][severity]}-%{GREEDYDATA:[event][code]}",
        "syslog_msg_code", "%{GREEDYDATA:msg}"
      ]
    }
  } else {
    mutate {
      add_tag =>  "to_do"
    }#end mutate
  }

  mutate {
    add_field => {"[log][syslog][severity][code]" => "%{[event][severity]}"}
  } #end mutate

    translate {
    field => "[event][severity]"
    destination => "[log][syslog][severity][name]"
    dictionary => {
      "0" => "Emergency"
      "1" => "Alert"
      "2" => "Critical"
      "3" => "Error"
      "4" => "Warning"
      "5" => "Notification"
      "6" => "Informational"
    }
    fallback => "I'm a teapot"
  }#end translate


  #drop {}
}#end filter
output {
  # Below is used for testing and should not be active normally.
  # It is still better to review the entry within elasticsearch
  # and filter with the use of tags such as "to_do"
  #if [type] == "syslog-firewall" {   #   or [type] == "syslog-vpn"
  #  stdout {}
  #}
  #stdout {}

  if "asa" in [tags] {
    pipeline { send_to => [cisco_asa] }
  } else if "cisco-network" in [tags] {
    pipeline { send_to => [cisco_facility_translate] }
  } else {
    pipeline { send_to => [egress] }
  }
}
